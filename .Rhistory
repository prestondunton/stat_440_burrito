# Chunk 1
library("tidyverse")
source('./gibbs_util.R')
RANDOM_SEED = 440
# Chunk 2: setup
load('./burritodata.Rda')
head(burrito)
# Count Remove NA Cost rows
which(is.na(burrito$Cost))
burrito = burrito[!is.na(burrito$Cost),]
nrow(burrito)
burrito<-burrito%>%mutate(Vegetable=as.logical(Pineapple+Bell_peper+Tomato+
Cabbage+Mushroom+Corn+
Carrots+Zucchini))
burrito<-burrito%>%mutate(Breakfast=as.logical(Egg+Bacon+Ham))
burrito<-burrito%>%mutate(Other=as.logical(Fish+Taquito+Chile_relleno+
Nopales+Sushi+Lobster))
burrito<-select(burrito, -c('Pineapple', 'Bell_peper', 'Tomato', 'Cabbage',
'Mushroom', 'Corn', 'Carrots', 'Zucchini',
'Egg', 'Ham', 'Fish', 'Taquito', 'Chile_relleno',
'Nopales', 'Sushi', 'Lobster', 'Bacon'))
burrito<-burrito%>%mutate_at(c('Vegetable','Other','Breakfast'),as.double)
head(burrito)
burrito = burrito %>% mutate(Num_Proteins= Chicken + Beef + Pork + Shrimp + Other + Breakfast)
ingredient_cols = colnames(burrito)[18:36]
ingredient_X = as.matrix(burrito[ingredient_cols])
dim(ingredient_X); head(ingredient_X)
cost_y = burrito$Cost
length(cost_y); head(cost_y)
# Chunk 3: gibbs
set.seed(RANDOM_SEED)
p = ncol(ingredient_X) + 1
tau_2 = 4
prior_sigma = 1.5
a = 1 / (prior_sigma^4)
b = 1 / (prior_sigma^2)
mlr_post_dist = mlr_gibbs(ingredient_X, cost_y, mu=rep(0, p), tau_2, a, b)
mlr_post_dist = mlr_post_dist[5001:1000, ]
summarize_dist(mlr_post_dist, colnames(mlr_post_dist), round_places=2)
# Chunk 4: t_gibbs
set.seed(RANDOM_SEED)
truncated_post_dist<-truncated_gibbs(ingredient_X, cost_y, mu=rep(1, p),
tau_2, a, b, lb=rep(0,p), ub=rep(Inf,p))
truncated_post_dist = truncated_post_dist[5001:1000, ]
# Chunk 5: trace_plots
plot_traces(truncated_post_dist[,1:5], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,6:10], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,11:15], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,16:21], 'Parameter Traces (After Burn In)')
# Chunk 6: acf_plots
acf_plots(truncated_post_dist[,1:5])
acf_plots(truncated_post_dist[,6:10])
acf_plots(truncated_post_dist[,11:15])
acf_plots(truncated_post_dist[,16:21])
# Chunk 7: summary
summarize_dist(truncated_post_dist, colnames(truncated_post_dist), round_places=2)
# Chunk 8: protein subsetting
num_burritos_no_protein = sum(burrito$Num_Proteins == 0)
num_burritos_no_protein
num_burritos_double_protein = sum(burrito$Num_Proteins == 2)
num_burritos_double_protein
burrito_no_double = burrito[burrito$Num_Proteins != 2, ]
head(burrito_no_double)
burrito_no_double = burrito_no_double %>% mutate(Protein= as.factor(Chicken + 2*Beef + 3*Pork + 4*Shrimp + 5*Other + 6*Breakfast))
head(burrito_no_double)
# Chunk 9: mixed model
proteins = c('Chicken', 'Beef', 'Pork', 'Shrimp', 'Other', 'Breakfast')
X_proteins = as.matrix(burrito[proteins])
head(X_proteins)
mlr_protein_post_dist = truncated_gibbs(X_proteins, cost_y, mu=rep(1, 7),
tau_2, a, b, lb=rep(0,7), ub=rep(Inf,7))
mlr_protein_post_dist = mlr_protein_post_dist[5001:1000, ]
plot_traces(mlr_protein_post_dist[,1:4], 'Parameter Traces (After Burn In)')
plot_traces(mlr_protein_post_dist[,5:8], 'Parameter Traces (After Burn In)')
summarize_dist(mlr_protein_post_dist, colnames(mlr_protein_post_dist), round_places=2)
# Chunk 10: Deviance Information Criterion
mlr_dist<-dic(ingredient_X,mlr_post_dist)
truncated_dist<-dic(ingredient_X, truncated_post_dist)
reduced<-dic(X_proteins,mlr_protein_post_dist)
mlr_dist
truncated_dist
reduced
library(mvtnorm)
library(tmvtnorm)
library(pracma)
require(reshape2)
library(knitr)
library(ggfortify)
mlr_gibbs <- function(X_raw, y, mu, tau_2, a, b, iterations=10000) {
X = cbind(1, X_raw)
# calculate needed quantities for sampling
tau_2_inv = 1 / tau_2
n = length(y)
p = ncol(X)
# create matrix to store posterior samples
posterior_dist = matrix(NA, nrow=iterations, ncol=p+1)
# set starting values for Gibbs sampler to be samples from prior
beta = t(rmvnorm(1, mean=mu, sigma=tau_2 * eye(p)))
sig_2_inv = rgamma(1, a, b)
posterior_dist[1, ] = c(beta, sig_2_inv)
# run Gibbs sampling MCMC algo
for (i in seq(2, iterations)) {
v = solve(sig_2_inv * t(X) %*% X + tau_2_inv * eye(p))
m = v %*% (sig_2_inv * t(X) %*% y + tau_2_inv * mu)
beta = t(rmvnorm(1, m, v))
sig_2_inv = rgamma(1, a + n/2, b + 0.5 * t(y-X %*% beta) %*% (y-X %*% beta))
posterior_dist[i, ] = c(beta, sig_2_inv)
}
# provide sigma as a parameter in the posterior, remove sig_2_inv
sigma_column = ncol(posterior_dist)
posterior_dist[, sigma_column] = 1 / sqrt(posterior_dist[,sigma_column])
colnames(posterior_dist) = c('Intercept', colnames(X_raw), 'sigma')
return(posterior_dist)
}
truncated_gibbs <- function(X_raw, y, mu, tau_2, a, b, iterations=10000, lb=0, ub=Inf){
X <- cbind(1,X_raw)
tau_2_inv <- 1 / tau_2
n <- length(y)
p <- ncol(X)
posterior_dist <- matrix(NA, nrow=iterations, ncol=p+1)
beta <- drop(rtmvnorm(n=1, mean=mu, sigma=tau_2 * eye(p), lower=lb, upper=ub, algorithm="gibbs"))
sig_2_inv <- rgamma(1, a, b)
posterior_dist[1, ] <- c(beta, sig_2_inv)
XtX <- t(X) %*% X
Xty <- t(X) %*% y
I <- diag(p)
for ( i in seq(2, iterations)){
v <- solve(sig_2_inv * XtX + tau_2_inv * I)
m <- drop(v %*% (sig_2_inv * Xty + tau_2_inv * mu))
beta <- drop(rtmvnorm(n=1, mean=m, sigma=v, lower=lb, upper=ub, algorithm="gibbs"))
sig_2_inv <- rgamma(1, a+n/2, b+ 0.5 * t(y-X %*% beta) %*% (y- X %*% beta))
posterior_dist[i, ] <- c(beta, sig_2_inv)
}
sigma_column <- ncol(posterior_dist)
posterior_dist[, sigma_column] <- 1/sqrt(posterior_dist[,sigma_column])
colnames(posterior_dist) <- c('Intercept', colnames(X_raw), 'sigma')
return(posterior_dist)
}
plot_traces <- function(gibbs_distribution, title='', facets=TRUE) {
plot_df = melt(gibbs_distribution)
colnames(plot_df) = c('Iteration', 'Parameter', 'Estimate')
if(facets){
# or plot on different plots
ggplot(plot_df, aes(Iteration, Estimate)) + geom_line() +
facet_grid(Parameter ~ ., scales='free_y') + labs(title=title)
} else {
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(plot_df, aes(Iteration, Estimate)) +
geom_line(aes(colour = Parameter)) + labs(title=title)
}
}
acf_plots <- function(dist){
plot_df <- melt(dist)
colnames(plot_df) <- c('Iteration','Parameter','Estimate')
unique_params = unique(plot_df$Parameter)
acf.key<-list()
for(i in 1:length(unique_params)){
acf.key[[i]]<-acf(plot_df$Estimate[plot_df$Parameter==unique_params[[i]]],
plot=FALSE)
}
names(acf.key) = unique_params
autoplot(acf.key, nbin=5)
}
summarize_dist <- function(distribution, param_names, title='', round_places=4) {
table = data.frame()
for (i in seq(ncol(distribution))) {
param_sample = distribution[, i]
param_summary = c(mean(param_sample), sd(param_sample),
quantile(param_sample, 0.025),
quantile(param_sample, 0.975))
table = rbind(table, param_summary)
}
table = cbind(param_names, table)
table = round_df(table, round_places)
kable(table,
col.names=c('Parameter', 'Post. Mean', 'Post. Sd',
'95% CI Low', '95% CI High'),
caption=title
)
}
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
y <- cost_y
group <- as.factor(burrito$Location)
z <- model.matrix(~group-1)
w <- cbind(1, ingredient_X, z)
q <- ncol(z)
p <- ncol(w)-q
n <- nrow(w)
beta_keep <- matrix(NA, niter, p)
gamma_keep <- matrix(NA, niter, q)
sig2inv_keep <- rep(NA, niter)
kappa2inv_keep <- rep(NA, niter)
a1 <- 0.1975
a2 <- 0.44
b1 <- 0.5
b2 <- 0.5
#starting values
beta <- rnorm(p, 0, 2)
gamma <- rnorm(q, 0, 1)
theta <- c(beta, gamma)
sig2inv <- rgamma(1, a1, a2)
kappa2inv <- rgamma(1, b1, b2)
tau2 <- 4
sigdiag <- c(0, rep(1/tau2, p-1), rep(kappa2inv,1))
for(i in 1:niter){
#update beta
v <- t(w)%*%w * sig2inv
sigdiag[(p+1):(p+q)] <- kappa2inv
diag(v) <- diag(v) + sigdiag
v <- chol2inv(chol(v))
m <- v %*% (sig2inv*t(w)%*%y)
theta <- drop(m + t(chol(v)) %*% rnorm(p+q, 0, 1))
#update sig2inv
sig2inv <- rgamma(1, a1 + n/2, a2 + 0.5*sum((y-w%*%theta)^2))
#update kappa2inv
kappa2inv <- rgamma(1, b1 + q/2, b2 + sum(theta[(p+1):(p+q)]^2))
#store output
sig2inv_keep[i] <- sig2inv
kappa2inv_keep[i] <- kappa2inv
beta_keep[i,] <- theta[1:p]
gamma_keep[i,] <- theta[(p+1):(p+q)]
}
<<<<<<< HEAD
=======
dic<-function(x,beta){
dbtheta<-0
for(i in 1:ncol(x)){
dbtheta<-sum(x[,i]*mean(beta[,i]))+dbtheta
}
dbtheta<--2*log(dbtheta)
bdtheta<-0
for(i in 1:ncol(x)){
for(ii in 1:nrow(beta)){
bdtheta<-sum(x[,i]*beta[ii,i])+bdtheta
}
}
bdtheta<--2*log(bdtheta/(nrow(beta)*ncol(beta)))
return(2*dbtheta-bdtheta)
}
>>>>>>> 1814b6cc39619d82944be41f60957e56b548aeb7
dic<-function(x,beta){
dbtheta<-0
for(i in 1:ncol(x)){
dbtheta<-sum(x[,i]*mean(beta[,i]))+dbtheta
}
dbtheta<--2*log(dbtheta)
bdtheta<-0
for(i in 1:ncol(x)){
for(ii in 1:nrow(beta)){
bdtheta<-sum(x[,i]*beta[ii,i])+bdtheta
}
}
bdtheta<--2*log(bdtheta/(nrow(beta)*ncol(beta)))
return(2*dbtheta-bdtheta)
}
# Chunk 1
library("tidyverse")
source('./gibbs_util.R')
RANDOM_SEED = 440
# Chunk 2: setup
load('./burritodata.Rda')
head(burrito)
# Count Remove NA Cost rows
which(is.na(burrito$Cost))
burrito = burrito[!is.na(burrito$Cost),]
nrow(burrito)
burrito<-burrito%>%mutate(Vegetable=as.logical(Pineapple+Bell_peper+Tomato+
Cabbage+Mushroom+Corn+
Carrots+Zucchini))
burrito<-burrito%>%mutate(Breakfast=as.logical(Egg+Bacon+Ham))
burrito<-burrito%>%mutate(Other=as.logical(Fish+Taquito+Chile_relleno+
Nopales+Sushi+Lobster))
burrito<-select(burrito, -c('Pineapple', 'Bell_peper', 'Tomato', 'Cabbage',
'Mushroom', 'Corn', 'Carrots', 'Zucchini',
'Egg', 'Ham', 'Fish', 'Taquito', 'Chile_relleno',
'Nopales', 'Sushi', 'Lobster', 'Bacon'))
burrito<-burrito%>%mutate_at(c('Vegetable','Other','Breakfast'),as.double)
head(burrito)
burrito = burrito %>% mutate(Num_Proteins= Chicken + Beef + Pork + Shrimp + Other + Breakfast)
ingredient_cols = colnames(burrito)[18:36]
ingredient_X = as.matrix(burrito[ingredient_cols])
dim(ingredient_X); head(ingredient_X)
cost_y = burrito$Cost
length(cost_y); head(cost_y)
# Chunk 3: gibbs
set.seed(RANDOM_SEED)
p = ncol(ingredient_X) + 1
tau_2 = 4
prior_sigma = 1.5
a = 1 / (prior_sigma^4)
b = 1 / (prior_sigma^2)
mlr_post_dist = mlr_gibbs(ingredient_X, cost_y, mu=rep(0, p), tau_2, a, b)
mlr_post_dist = mlr_post_dist[5001:1000, ]
summarize_dist(mlr_post_dist, colnames(mlr_post_dist), round_places=2)
# Chunk 4: t_gibbs
set.seed(RANDOM_SEED)
truncated_post_dist<-truncated_gibbs(ingredient_X, cost_y, mu=rep(1, p),
tau_2, a, b, lb=rep(0,p), ub=rep(Inf,p))
truncated_post_dist = truncated_post_dist[5001:1000, ]
# Chunk 5: trace_plots
plot_traces(truncated_post_dist[,1:5], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,6:10], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,11:15], 'Parameter Traces (After Burn In)')
plot_traces(truncated_post_dist[,16:21], 'Parameter Traces (After Burn In)')
# Chunk 6: acf_plots
acf_plots(truncated_post_dist[,1:5])
acf_plots(truncated_post_dist[,6:10])
acf_plots(truncated_post_dist[,11:15])
acf_plots(truncated_post_dist[,16:21])
# Chunk 7: summary
summarize_dist(truncated_post_dist, colnames(truncated_post_dist), round_places=2)
# Chunk 8: protein subsetting
num_burritos_no_protein = sum(burrito$Num_Proteins == 0)
num_burritos_no_protein
num_burritos_double_protein = sum(burrito$Num_Proteins == 2)
num_burritos_double_protein
burrito_no_double = burrito[burrito$Num_Proteins != 2, ]
head(burrito_no_double)
burrito_no_double = burrito_no_double %>% mutate(Protein= as.factor(Chicken + 2*Beef + 3*Pork + 4*Shrimp + 5*Other + 6*Breakfast))
head(burrito_no_double)
# Chunk 9: mixed model
proteins = c('Chicken', 'Beef', 'Pork', 'Shrimp', 'Other', 'Breakfast')
X_proteins = as.matrix(burrito[proteins])
head(X_proteins)
mlr_protein_post_dist = truncated_gibbs(X_proteins, cost_y, mu=rep(1, 7),
tau_2, a, b, lb=rep(0,7), ub=rep(Inf,7))
mlr_protein_post_dist = mlr_protein_post_dist[5001:1000, ]
plot_traces(mlr_protein_post_dist[,1:4], 'Parameter Traces (After Burn In)')
plot_traces(mlr_protein_post_dist[,5:8], 'Parameter Traces (After Burn In)')
summarize_dist(mlr_protein_post_dist, colnames(mlr_protein_post_dist), round_places=2)
# Chunk 10: Deviance Information Criterion
mlr_dist<-dic(ingredient_X,mlr_post_dist)
truncated_dist<-dic(ingredient_X, truncated_post_dist)
reduced<-dic(X_proteins,mlr_protein_post_dist)
mlr_dist
truncated_dist
reduced
mean(sig2inv_keep)
y <- cost_y
group <- as.factor(burrito$Location)
z <- model.matrix(~group-1)
w <- cbind(1, ingredient_X, z)
q <- ncol(z)
p <- ncol(w)-q
n <- nrow(w)
beta_keep <- matrix(NA, niter, p)
gamma_keep <- matrix(NA, niter, q)
sig2inv_keep <- rep(NA, niter)
kappa2inv_keep <- rep(NA, niter)
niter <- 10000
q <- ncol(z)
p <- ncol(w)-q
n <- nrow(w)
beta_keep <- matrix(NA, niter, p)
gamma_keep <- matrix(NA, niter, q)
sig2inv_keep <- rep(NA, niter)
kappa2inv_keep <- rep(NA, niter)
a1 <- 0.1975
a2 <- 0.44
b1 <- 0.5
b2 <- 0.5
#starting values
beta <- rnorm(p, 0, 2)
gamma <- rnorm(q, 0, 1)
theta <- c(beta, gamma)
sig2inv <- rgamma(1, a1, a2)
kappa2inv <- rgamma(1, b1, b2)
tau2 <- 4
sigdiag <- c(0, rep(1/tau2, p-1), rep(kappa2inv,1))
for(i in 1:niter){
#update beta
v <- t(w)%*%w * sig2inv
sigdiag[(p+1):(p+q)] <- kappa2inv
diag(v) <- diag(v) + sigdiag
v <- chol2inv(chol(v))
m <- v %*% (sig2inv*t(w)%*%y)
theta <- drop(m + t(chol(v)) %*% rnorm(p+q, 0, 1))
#update sig2inv
sig2inv <- rgamma(1, a1 + n/2, a2 + 0.5*sum((y-w%*%theta)^2))
#update kappa2inv
kappa2inv <- rgamma(1, b1 + q/2, b2 + sum(theta[(p+1):(p+q)]^2))
#store output
sig2inv_keep[i] <- sig2inv
kappa2inv_keep[i] <- kappa2inv
beta_keep[i,] <- theta[1:p]
gamma_keep[i,] <- theta[(p+1):(p+q)]
}
mean(sig2inv_keep)
mean(kappa2inv_keep)
colMeans(beta_keep)
colMeans(gamma_keep)
matplot(gamma_keep, type = "l")
gamma_keep[1:4]
head(gamma_keep)
gamma_keep[,1:4]
matplot(gamma_keep[,1:4], type = "l")
w <- cbind(1, X_proteins, z)
niter <- 10000
q <- ncol(z)
p <- ncol(w)-q
n <- nrow(w)
beta_keep <- matrix(NA, niter, p)
gamma_keep <- matrix(NA, niter, q)
sig2inv_keep <- rep(NA, niter)
kappa2inv_keep <- rep(NA, niter)
a1 <- 0.1975
a2 <- 0.44
b1 <- 0.5
b2 <- 0.5
#starting values
beta <- rnorm(p, 0, 2)
gamma <- rnorm(q, 0, 1)
theta <- c(beta, gamma)
sig2inv <- rgamma(1, a1, a2)
kappa2inv <- rgamma(1, b1, b2)
tau2 <- 4
sigdiag <- c(0, rep(1/tau2, p-1), rep(kappa2inv,1))
for(i in 1:niter){
#update beta
v <- t(w)%*%w * sig2inv
sigdiag[(p+1):(p+q)] <- kappa2inv
diag(v) <- diag(v) + sigdiag
v <- chol2inv(chol(v))
m <- v %*% (sig2inv*t(w)%*%y)
theta <- drop(m + t(chol(v)) %*% rnorm(p+q, 0, 1))
#update sig2inv
sig2inv <- rgamma(1, a1 + n/2, a2 + 0.5*sum((y-w%*%theta)^2))
#update kappa2inv
kappa2inv <- rgamma(1, b1 + q/2, b2 + sum(theta[(p+1):(p+q)]^2))
#store output
sig2inv_keep[i] <- sig2inv
kappa2inv_keep[i] <- kappa2inv
beta_keep[i,] <- theta[1:p]
gamma_keep[i,] <- theta[(p+1):(p+q)]
}
mean(sig2inv_keep)
mean(kappa2inv_keep)
colMeans(beta_keep)
colMeans(gamma_keep)
var(gamma_keep)
mean(kappa2inv_keep)
kappa2 <- mean(1/kappa2inv_keep)
kappa2
sig2 <- mean(1/sig2inv_keep)
sig2
set.seed(RANDOM_SEED)
p = ncol(ingredient_X) + 1
tau_2 = 4
prior_sigma = 1.5
a = 1 / (prior_sigma^4)
b = 1 / (prior_sigma^2)
mlr_post_dist = mlr_gibbs(ingredient_X, cost_y, mu=rep(0, p), tau_2, a, b)
mlr_post_dist = mlr_post_dist[5001:1000, ]
summarize_dist(mlr_post_dist, colnames(mlr_post_dist), round_places=2)
summarize_dist(mlr_post_dist, colnames(mlr_post_dist), round_places=2)
kappa2 <- mean(1/kappa2inv_keep)
sig2 <- mean(1/sig2inv_keep)
sig <- sqrt(sig2)
sig
kappa2
df <- data.frame(Kappa2 = kappa2, Sigma2 = sig2, Sigma = sig)
df
kable(df)
summarize_dist(beta_keep, colnames(beta_keep), round_places = 2)
summarize_dist(beta_keep, round_places = 2)
bmeans <- apply(beta_keep, 2, mean)
bsd <- apply(beta_keep, 2, sd)
blower <- apply(beta_keep, 2, quantile, 0.025)
bupper <- apply(beta_keep, 2, quantile, 0.975)
smeans <- apply(sig2inv_keep, 2, mean)
ssd <- apply(sig2inv_keep, 2, sd)
slower <- apply(sig2inv_keep, 2, quantile, 0.025)
supper <- apply(sig2inv_keep, 2, quantile, 0.975)
kmeans <- apply(kappa2inv_keep, 2, mean)
ksd <- apply(kappa2inv_keep, 2, sd)
klower <- apply(kappa2inv_keep, 2, quantile, 0.025)
kupper <- apply(kappa2inv_keep, 2, quantile, 0.975)
mean(sig2inv_keep)
dim(sig2inv_keep)
sig2inv_keep
cbind(sig2inv_keep, kappa2inv_keep, beta_keep)
res <- cbind(sig2inv_keep, kappa2inv_keep, beta_keep)
summarize_dist(res, colnames(res), round_places = 2)
res <- cbind(sig2inv_keep, kappa2inv_keep)
res <- cbind(res, beta_keep)
summarize_dist(res, colnames(res), round_places = 2)
kap2 <- 1/kappa2inv_keep
sigma1 <- 1/sqrt(sig2inv_keep)
res <- cbind(kap2, beta_keep, sigma)
summarize_dist(mlr_protein_post_dist, colnames(mlr_protein_post_dist), round_places=2)
res <- cbind(beta_keep, sigma, kap2)
res <- res[-1:5000,]
res <- res[5001:10000,]
summarize_dist(res, param_names = c("Intercept", "Chicken", "Beef", "Pork", "Shrimp", "Other", "Breakfast", "Sigma", "Kappa2"), round_places = 2)
summarize_dist(res, colnames(res), round_places = 2)
head(res)
res <- cbind(beta_keep, sigma1, kap2)
summarize_dist(res, colnames(res), round_places = 2)
colnames(res) <- c("Intercept", "Chicken", "Beef", "Pork", "Shrimp", "Other", "Breakfast", "Sigma", "Kappa2")
summarize_dist(res, colnames(res), round_places = 2)
